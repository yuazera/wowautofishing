import baostock as bs
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import os
import time

def get_stock_data(stock_codes=None, supplement=True):
    # 登录baostock
    bs.login()
    
    # 如果是补充模式，加载现有数据
    data_dict = {}
    save_path = 'D:/autofishing/wowautofishing/estimate-main/src/data/CN/a500/baseline_data_a500.npy'
    if supplement and os.path.exists(save_path):
        data_dict = np.load(save_path, allow_pickle=True).item()
    
    # 使用传入的股票代码列表或原始列表
    if stock_codes is None:
        df_500 = pd.DataFrame({
            "code": [
                "000001",
                "000002",
                "000009",
                "000034",
                "000035",
                "000039",
                "000063",
                "000066",
                "000069",
                "000100",
                "000157",
                "000301",
                "000333",
                "000338",
                "000400",
                "000408",
                "000423",
                "000425",
                "000519",
                "000538",
                "000547",
                "000568",
                "000617",
                "000623",
                "000625",
                "000629",
                "000630",
                "000651",
                "000661",
                "000683",
                "000708",
                "000725",
                "000733",
                "000738",
                "000768",
                "000786",
                "000792",
                "000807",
                "000818",
                "000830",
                "000831",
                "000858",
                "000878",
                "000887",
                "000932",
                "000933",
                "000938",
                "000960",
                "000963",
                "000967",
                "000975",
                "000977",
                "000988",
                "000998",
                "000999",
                "001914",
                "001965",
                "001979",
                "002001",
                "002007",
                "002008",
                "002025",
                "002027",
                "002028",
                "002044",
                "002049",
                "002050",
                "002064",
                "002065",
                "002074",
                "002078",
                "002081",
                "002085",
                "002091",
                "002120",
                "002128",
                "002129",
                "002131",
                "002138",
                "002145",
                "002151",
                "002152",
                "002156",
                "002176",
                "002179",
                "002180",
                "002185",
                "002195",
                "002202",
                "002223",
                "002230",
                "002236",
                "002240",
                "002241",
                "002245",
                "002252",
                "002266",
                "002268",
                "002271",
                "002273",
                "002281",
                "002292",
                "002294",
                "002312",
                "002318",
                "002340",
                "002352",
                "002353",
                "002368",
                "002371",
                "002372",
                "002384",
                "002389",
                "002405",
                "002407",
                "002409",
                "002410",
                "002414",
                "002415",
                "002422",
                "002432",
                "002436",
                "002439",
                "002444",
                "002456",
                "002459",
                "002460",
                "002463",
                "002465",
                "002466",
                "002472",
                "002475",
                "002493",
                "002497",
                "002508",
                "002517",
                "002532",
                "002541",
                "002544",
                "002555",
                "002558",
                "002572",
                "002594",
                "002601",
                "002603",
                "002607",
                "002624",
                "002625",
                "002648",
                "002709",
                "002714",
                "002738",
                "002739",
                "002756",
                "002812",
                "002821",
                "002831",
                "002841",
                "002916",
                "002920",
                "002938",
                "003816",
                "300001",
                "300002",
                "300003",
                "300012",
                "300014",
                "300015",
                "300017",
                "300024",
                "300033",
                "300037",
                "300054",
                "300058",
                "300059",
                "300068",
                "300070",
                "300073",
                "300088",
                "300114",
                "300118",
                "300122",
                "300124",
                "300136",
                "300142",
                "300144",
                "300182",
                "300207",
                "300212",
                "300223",
                "300251",
                "300253",
                "300274",
                "300285",
                "300296",
                "300308",
                "300315",
                "300316",
                "300339",
                "300346",
                "300347",
                "300383",
                "300390",
                "300394",
                "300395",
                "300408",
                "300413",
                "300418",
                "300433",
                "300438",
                "300450",
                "300454",
                "300457",
                "300459",
                "300474",
                "300476",
                "300496",
                "300502",
                "300529",
                "300558",
                "300567",
                "300568",
                "300573",
                "300595",
                "300601",
                "300604",
                "300627",
                "300628",
                "300661",
                "300676",
                "300699",
                "300724",
                "300750",
                "300751",
                "300759",
                "300760",
                "300763",
                "300769",
                "300782",
                "300832",
                "300866",
                "300896",
                "300919",
                "300999",
                "301236",
                "600000",
                "600004",
                "600007",
                "600008",
                "600009",
                "600010",
                "600011",
                "600018",
                "600019",
                "600026",
                "600027",
                "600028",
                "600029",
                "600030",
                "600031",
                "600036",
                "600038",
                "600039",
                "600048",
                "600050",
                "600066",
                "600085",
                "600089",
                "600096",
                "600104",
                "600111",
                "600115",
                "600118",
                "600129",
                "600131",
                "600141",
                "600143",
                "600150",
                "600153",
                "600160",
                "600161",
                "600166",
                "600167",
                "600170",
                "600176",
                "600177",
                "600183",
                "600188",
                "600196",
                "600219",
                "600233",
                "600256",
                "600258",
                "600276",
                "600309",
                "600315",
                "600316",
                "600323",
                "600325",
                "600332",
                "600335",
                "600346",
                "600352",
                "600362",
                "600372",
                "600392",
                "600398",
                "600399",
                "600406",
                "600415",
                "600418",
                "600426",
                "600436",
                "600438",
                "600460",
                "600482",
                "600486",
                "600487",
                "600489",
                "600497",
                "600498",
                "600499",
                "600515",
                "600516",
                "600519",
                "600521",
                "600529",
                "600535",
                "600547",
                "600549",
                "600563",
                "600570",
                "600584",
                "600585",
                "600588",
                "600637",
                "600655",
                "600660",
                "600667",
                "600674",
                "600690",
                "600699",
                "600704",
                "600741",
                "600745",
                "600754",
                "600755",
                "600760",
                "600763",
                "600765",
                "600771",
                "600795",
                "600803",
                "600816",
                "600820",
                "600839",
                "600845",
                "600859",
                "600862",
                "600867",
                "600879",
                "600884",
                "600885",
                "600886",
                "600887",
                "600893",
                "600895",
                "600900",
                "600905",
                "600919",
                "600938",
                "600941",
                "600988",
                "600989",
                "600998",
                "601000",
                "601006",
                "601012",
                "601018",
                "601021",
                "601058",
                "601088",
                "601100",
                "601111",
                "601117",
                "601127",
                "601155",
                "601166",
                "601168",
                "601179",
                "601186",
                "601216",
                "601225",
                "601233",
                "601238",
                "601288",
                "601318",
                "601319",
                "601328",
                "601360",
                "601390",
                "601398",
                "601567",
                "601600",
                "601601",
                "601607",
                "601615",
                "601618",
                "601628",
                "601633",
                "601636",
                "601658",
                "601668",
                "601669",
                "601677",
                "601689",
                "601727",
                "601728",
                "601766",
                "601799",
                "601800",
                "601816",
                "601857",
                "601866",
                "601868",
                "601872",
                "601877",
                "601880",
                "601888",
                "601899",
                "601919",
                "601966",
                "601985",
                "601988",
                "601989",
                "603000",
                "603019",
                "603077",
                "603087",
                "603129",
                "603259",
                "603260",
                "603288",
                "603290",
                "603392",
                "603456",
                "603486",
                "603501",
                "603568",
                "603588",
                "603596",
                "603605",
                "603606",
                "603613",
                "603650",
                "603659",
                "603688",
                "603799",
                "603806",
                "603816",
                "603833",
                "603882",
                "603885",
                "603899",
                "603939",
                "603979",
                "603986",
                "603993",
                "605117",
                "605358",
                "605499",
                "688002",
                "688005",
                "688008",
                "688009",
                "688012",
                "688036",
                "688041",
                "688047",
                "688063",
                "688072",
                "688099",
                "688111",
                "688120",
                "688122",
                "688126",
                "688169",
                "688180",
                "688188",
                "688223",
                "688235",
                "688256",
                "688271",
                "688303",
                "688390",
                "688396",
                "688599",
                "688617",
                "688777",
                "688981"
            ]
        })
        stock_codes = df_500['code'].tolist()
    
    # 设置时间范围
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = (datetime.now() - timedelta(days=365*4)).strftime('%Y-%m-%d')
    
    # 获取每只股票的历史数据
    for code in stock_codes:
        if supplement and code in data_dict:
            print(f"Skipping existing stock: {code}")
            continue
            
        try:
            # 对于上证股票需要添加sh.，深证股票需要添加sz.
            prefix = 'sh.' if code.startswith('6') else 'sz.'
            full_code = prefix + code
            
            # 使用baostock获取前复权数据
            rs = bs.query_history_k_data_plus(
                full_code,
                "date,open,high,low,close,volume,amount",
                start_date=start_date,
                end_date=end_date,
                frequency="d",
                adjustflag="2"  # 前复权
            )
            
            if rs.error_code != '0':
                print(f'Error getting data for {code}: {rs.error_msg}')
                continue
                
            # 转换为DataFrame
            df = rs.get_data()
            if not df.empty:
                # 处理空值
                df = df.replace('', np.nan)
                
                # 转换数据类型
                numeric_columns = ['open', 'high', 'low', 'close', 'volume']
                df[numeric_columns] = df[numeric_columns].astype(float)
                
                # 删除所有包含NaN的行
                df = df.dropna(subset=numeric_columns)
                
                if len(df) > 0:  # 确保还有数据
                    # 添加adjclose列（使用close作为adjclose，因为已经是前复权数据）
                    df['adjclose'] = df['close']
                    
                    # 转换日期格式
                    df['date'] = pd.to_datetime(df['date'])
                    
                    # 选择和排序列
                    df = df[['date', 'open', 'high', 'low', 'close', 'volume', 'adjclose']]
                    
                    # 存储到字典中
                    data_dict[code] = df.values
                    print(f"Successfully retrieved data for {code}")
                else:
                    print(f"No valid data after cleaning for {code}")
                
            time.sleep(0.02)  # 添加延时避免请求过快
            
        except Exception as e:
            print(f"Error getting data for {code}: {str(e)}")
            continue
    
    # 登出系统
    bs.logout()
    
    # 保存为npy文件
    os.makedirs(os.path.dirname(save_path), exist_ok=True)
    np.save(save_path, data_dict)
    print(f"Data saved to {save_path}")
    
    return data_dict

if __name__ == "__main__":
    # 首先检查缺失的股票
    from check_missing import check_missing_stocks
    missing_codes = check_missing_stocks()
    
    if missing_codes:
        print(f"\nAttempting to retrieve data for {len(missing_codes)} missing stocks...")
        get_stock_data(missing_codes, supplement=True)
    else:
        print("No missing stocks found.")